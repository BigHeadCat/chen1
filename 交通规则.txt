#include<iostream>
#include<vector>
#include<cstring>
using namespace std;
const int inf=10000;
vector<int>c[10010];
//int c[1001][1001];
int flag[10010];
int dist[10010];
int cost[10010];
void dijkstra(int n)
{
	int i;
	for(i=2;i<=n;i++)
	{
		dist[i]=c[1][i];
		cost[i]=c[1][i];
	}
	dist[1]=0;
	cost[1]=0;
	flag[1]=1;
	int j;
	for(i=2;i<=n;i++)
	{
		int min=inf;
		int u=1;
		for(j=1;j<=n;j++)
		{
			if(flag[j]==0&&dist[j]<min)
			{
				min=dist[j];
				u=j;
			}
		}
		flag[u]=1;
		for(j=1;j<=n;j++)
		{
			if(flag[j]==0&&c[u][j]<inf)
			{
				int temp=dist[u]+c[u][j];
				if(temp<dist[j])
				{
					dist[j]=temp;
					cost[j]=c[u][j];
				}
				if(temp==dist[j])
				{
					dist[j]=temp;
					cost[j]=cost[j]>c[u][j]?c[u][j]:cost[j];
				}
			}
		}
	}
				

}

int main()
{
	int n,m;
	scanf("%d%d",&n,&m);
	int i,j;
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			if(i==j)
				c[i][j]=0;
			else
				c[i][j]=inf;
		}
		int a,b,d;
		for(i=0;i<m;i++)
		{
			scanf("%d%d%d",&a,&b,&d);
			c[a][b]=d;
			c[b][a]=d;
		}
		memset(flag,0,sizeof(flag));
		dijkstra(n);
		int ans=0;
		for(i=2;i<=n;i++)
			ans=ans+cost[i];
		printf("%d\n",ans);		
		return 0;
}
