#include<iostream>
#include<cstring>
using namespace std;
int dp[1005][1005];
int t[1005];
int sum[1005];
void minsum(int n)
{
	memset(dp,0,sizeof(dp));
	int r,i,j,k;
	for(r=2;r<=n;r++)
	{
		for(i=1;i<=n-r+1;i++)
		{
			j=i+r-1;
			dp[i][j]=dp[i][i]+dp[i+1][j]+sum[j]-sum[i-1];
			for(k=i+1;k<j;k++)
			{
				int temp=dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1];
				if(temp<dp[i][j])
					dp[i][j]=temp;
			}
		}
	}
}
			
int main()
{
	int n;
	scanf("%d",&n);
	int i;
	for(i=1;i<=n;i++)
		scanf("%d",&t[i]);
	sum[0]=0;
	sum[1]=t[1];
	for(i=2;i<=n;i++)
		sum[i]=sum[i-1]+t[i];
	minsum(n);
	printf("%d\n",dp[1][n]);
	return 0;
}





/*改进平行四边形优化
#include<iostream>
#include<cstring>
using namespace std;
const int inf=10000000000;
int dp[1005][1005];
int s[1005][1005];
int t[1005];
int sum[1005];
void minsum(int n)
{
	memset(dp,0,sizeof(dp));
	int r,i,j,k;
	for(i=1;i<=n;i++)
		s[i][i]=i;
	for(r=2;r<=n;r++)
	{
		for(i=1;i<=n-r+1;i++)
		{
			j=i+r-1;
			dp[i][j]=dp[i][i]+dp[i+1][j]+sum[j]-sum[i-1];
			s[i][j]=i;
			for(k=s[i][j-1];k<=s[i+1][j];k++)
			{
				int temp=dp[i][k]+dp[k+1][j]+sum[j]-sum[i-1];
				if(temp<dp[i][j])
				{
					dp[i][j]=temp;
					s[i][j]=k;
				}
			}
			
		}
	}
}
			
int main()
{
	int n;
	scanf("%d",&n);
	int i;
	for(i=1;i<=n;i++)
		scanf("%d",&t[i]);
	sum[0]=0;
	sum[1]=t[1];
	for(i=2;i<=n;i++)
		sum[i]=sum[i-1]+t[i];
	minsum(n);
	printf("%d\n",dp[1][n]);
	return 0;
}

*/

